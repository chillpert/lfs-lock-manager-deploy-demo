name: LFSLockManger-Updater

on: workflow_dispatch

# on:
#   push:
#     branches:
#       - main
#       - develop

jobs:
  download-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest release info
        id: get-release
        run: |
          owner="chillpert"
          repo="lfs-lock-manager"
          release=$(curl -s "https://api.github.com/repos/$owner/$repo/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')
          echo "release=$release" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare
        run: |
          old_file=$(find . -name 'LfsLockManager_v*' -exec basename {} \;)
          echo "old_file=$old_file" >> $GITHUB_OUTPUT

          if [ ! -f "$old_file" ]; then
            echo "No lock manager executable exists. Downloading initial one."
            echo "is_matched=False" >> $GITHUB_OUTPUT
          else
            echo "Local lock manager found: '$old_file'"

            current_version=$(echo $old_file | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
            echo "Current version: '$current_version'"
            echo "previous_version=$current_version" >> $GITHUB_OUTPUT

            new_version=$(echo ${{ steps.get-release.outputs.release }} | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
            echo "New version: '$new_version'"

            echo "$new_version > $current_version"
            if (( $(echo "$new_version > $current_version" |bc -l) )); then
              echo "is_matched=False" >> $GITHUB_OUTPUT
              echo "Continue with download of new version ..."
            else
              echo "is_matched=True" >> $GITHUB_OUTPUT
              echo "Nothing to do"
            fi
          fi

      - name: Download release
        if: steps.compare.outputs.is_matched != 'true'
        run: |
          owner="chillpert"
          repo="lfs-lock-manager"
          release="${{ steps.get-release.outputs.release }}"
          asset_url="https://github.com/$owner/$repo/releases/download/$release/LfsLockManager_Windows.zip"

          mkdir -p temp
          cd temp
          curl -L -o asset.zip "$asset_url"
          unzip asset.zip
          mv LfsLockManager.exe ../LfsLockManager_${{ steps.get-release.outputs.release }}.exe
          cd ../

      - name: Commit changes
        if: steps.compare.outputs.is_matched != 'true'
        run: |
          # Make sure the following Git actions will be performed by the GitHub actions bot (for cosmetic reasons)
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          branch_name="junk/github-actions"

          # If this action created any previous PRs, they will be closed and the branch deleted
          gh pr close $branch_name --delete-branch --comment "Closed by newer PR via workflow."
          git push --delete origin $branch_name

          # (Re)create our branch
          git switch -c $branch_name

          # Stage the new file
          git add LfsLockManager_${{ steps.get-release.outputs.release }}.exe

          # Delete old version if it exists
          old_file=${{ steps.compare.outputs.old_file }}
          echo "Old file: '$old_file'"
          if [ -f "$old_file" ]; then
            echo "Deleting old file '$old_file'"
            rm $old_file
            git add $old_file
          fi

          # If no previous version existed, we also need 'settings.ini' as a starting point
          if [ ! -f "settings.ini" ]; then
            echo "Adding 'settings.ini'"
            mv temp/settings.ini settings.ini
            git add settings.ini
          fi

          # Commit changes
          git commit -m "Update LFS lock manager to latest"

          # Push changes
          git push --set-upstream origin $branch_name
          
          # Set the PR title and body
          previous_version=${{ steps.compare.outputs.previous_version }}
          new_version=${{ steps.get-release.outputs.release }}

          if [ -z "$previous_version" ]; then
            pr_title=$(echo "Download LFS lock manager ($new_version)")
            pr_body=$(echo "Add LFS lock manager ($new_version) to the repo. There was no version to replace. This is an automated action.")
          else
            pr_title=$(echo "Update LFS lock manager ($new_version)")
            pr_body=$(echo "Update LFS lock manager from $previous_version to $new_version. This is an automated action.")
          fi

          # Create the PR
          gh pr create -t "$pr_title" -b "$pr_body"

          # Let's not merge after all, for safety reasons. Feel free to uncomment this line if you prefer it.
          # gh pr merge $branch_name --rebase --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

